""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   Plug setup {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" the pope
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'

" P U R E _ M A G I C
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" autocomplete/linter/templates
Plug 'Valloric/YouCompleteMe'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'noahfrederick/vim-skeleton'
Plug 'chiel92/vim-autoformat'
Plug 'vim-syntastic/syntastic'

" colorscheme
Plug 'lithammer/vim-eighties'
Plug 'ldelossa/vimdark'
Plug 'altercation/vim-colors-solarized'
Plug 'morhetz/gruvbox'
Plug 'aonemd/kuroi.vim'

" misc
Plug 'luochen1990/rainbow'
Plug 'easymotion/vim-easymotion'
Plug 'frioux/vim-regedit'
Plug 'jiangmiao/auto-pairs'
Plug 'sheerun/vim-polyglot'
Plug 'AndrewRadev/splitjoin.vim'

" python
" Plug 'mgedmin/coverage-highlight.vim'

" Go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" LaTeX
Plug 'vim-latex/vim-latex'

" HTML/XML
Plug 'mattn/emmet-vim'

" markdown
" suan/vim-instant-markdown

call plug#end()            " required

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   Set miscellaneous options {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set encoding=utf-8

set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set virtualedit=onemore         " Allow for cursor beyond last character
set history=1000                " Store a ton of history (default is 20)
set hidden                      " Allow buffer switching without saving

set gdefault                    " Substitute all words on a line, :s///g gets only the first
set showmatch                   " Show matching brackets/parenthesis
set matchtime=3                 " for 3 tenths of a second
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uppercase present

set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
" A file that matches with one of these patterns is ignored when expanding |wildcards|,
" completing file or directory names, and influences the result of |expand()|, |glob()|
" and |globpath()| unless a flag is passed to disable this.
set wildignore+=*.pyc
set wildignore+=*.class
set wildignorecase              " Case is ignored when completing file names and directories.

set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set splitright                  " Puts new vsplit windows to the right of the current
set splitbelow                  " Puts new split windows to the bottom of the current
set nowrap                      " Lines longer than the width of the window will not wrap

set scrolloff=8                 " Number of lines to keep above and below the cursor
set listchars=tab:>-,trail:~,extends:>,precedes:<,space:·,eol:¬
set number                      " Print the line number in front of each line
set relativenumber              " Show the line number relative to the line with the cursor
set numberwidth=3               " Minimal number of columns to use for the line number
set signcolumn=number           " Display signs in the 'number' column
set cursorline				    " Highlight current line
set showmode                    " If in Insert, Replace or Visual mode put a message on the last line
set backspace=indent,eol,start  " More sanity in what backspace can do

" tabs
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent

" mouse
set mouse=a                     " Enable the use of the mouse

" Setting up the directories
set directory=~/.myvim/swap
set backup                      " Backups are nice ...
set backupdir=~/.myvim/backup
if has('persistent_undo')
    set undofile                " So is persistent undo ...
    set undolevels=1000         " Maximum number of changes that can be undone
    set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
    set undodir=~/.myvim/undo
endif

" setup clipboard behaviour
if has('clipboard')
    if has('unnamedplus')  " When possible use + register for copy-paste
        set clipboard=unnamed,unnamedplus
    else         " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif
endif

" setup statusline
if has('cmdline_info')
    set laststatus=2            " always show statusline

    set statusline=             " reset upon vimrc reload
    set statusline+=%<          " cut at start if the line is too long
    set statusline+=%f          " path relative to current directory
    set statusline+=\           " space
    set statusline+=%h          " help buffer flag
    set statusline+=%m          " modified flag
    set statusline+=%r          " readonly flag
    set statusline+=%=          " start right align
    set statusline+=\:b%n       " buffer number with :b in front
    set statusline+=%y          " filetype
    set statusline+=%w          " preview window flag
    set statusline+=\           " space
    set statusline+=%l,%c       " current line and column
    set statusline+=%V          " Virtual column number as -{num}. Not displayed if equal to 'c'
    set statusline+=\           " space
    set statusline+=%P          " percentage through file

    set showcmd                 " Show partial commands in status line and
                                " Selected characters/lines in visual mode
endif

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Optics {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set linespace=0                 " Number of pixel lines inserted between characters
set background=dark             " Protect your eyes

if has('gui_running')  " in gvim do this
    set termguicolors
else
    set t_Co=256
endif

" colorscheme kuroi
" colorscheme antares
" colorscheme gruvbox
colorscheme gruvbox-bootleg

" let g:solarized_termcolors=256  " needed for terminal use
" colorscheme solarized

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings and shortcuts {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

inoremap jk <ESC>
inoremap kj <ESC>

" move properly when lines are wrapped
nnoremap j gj
nnoremap k gk
" relative jump precise with count if there are wrapped lines
nnoremap gj j
nnoremap gk k

" yank from the cursor to the end of the line, to be consistent with C and D
nnoremap Y y$

" when in visual mode, search for selected text
vnoremap * ""y/<C-r>"<CR>
vnoremap # ""y?<C-r>"<CR>

" when in visual mode, J is usually a typo from holding shift for line visual
vnoremap J j
vnoremap K k

" if there is only one element in location list call :lfirst instead of :lnext
nmap <silent> [l  <Plug>LocationPrevious
nmap <silent> ]l  <Plug>LocationNext
" if there is only one element in quickfix list call :cfirst instead of :cnext
nmap <silent> [q  <Plug>QuickFixPrevious
nmap <silent> ]q  <Plug>QuickFixNext

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   Leadermap {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = "\<Space>"

" quick save and quit
nnoremap <leader>w :update<CR>
nnoremap <leader>q :q<CR>

" .vimRc Edit and Source
nnoremap <leader>re :tabedit $MYVIMRC<CR>
nnoremap <leader>rs :source $MYVIMRC<CR>

" toggle things
nnoremap <silent> <leader>nh :set hlsearch!<CR>
nnoremap <silent> <leader>nc :set cursorcolumn!<CR>
nnoremap <silent> <leader>nw :set wrap!<CR>
nnoremap <silent> <leader>nl :set list!<CR>
nnoremap <leader>np :set paste!<CR>
nnoremap <leader>nr :RainbowToggle<CR>
nnoremap <leader>ns :setlocal spell! spelllang=en_us<CR>

" yank whole file into system clipboard
nnoremap <leader>ya :%y+<CR>

" Close all Folds and go to the file bottom, but show as much as you can by
" going to the top first
nnoremap <leader>cf :normal zMggG<CR>
" same but Close folds and open one lever for when you are in a Class
nnoremap <leader>cc :normal zMzrggG<CR>

" split screen
nnoremap <leader>d <C-w>v
nnoremap <leader>s <C-w>s
" navigate windows
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l
" move windows around
nnoremap <leader>mh <C-w><S-h>
nnoremap <leader>mj <C-w><S-j>
nnoremap <leader>mk <C-w><S-k>
nnoremap <leader>ml <C-w><S-l>
" terminal navigation
tnoremap <leader><leader>h <C-w>h
tnoremap <leader><leader>j <C-w>j
tnoremap <leader><leader>k <C-w>k
tnoremap <leader><leader>l <C-w>l
" move terminal around
tnoremap <leader><leader>mh <C-w><S-h>
tnoremap <leader><leader>mj <C-w><S-j>
tnoremap <leader><leader>mk <C-w><S-k>
tnoremap <leader><leader>ml <C-w><S-l>
" change tabs from terminal
tnoremap <leader><leader>gt <C-w>gt
tnoremap <leader><leader>gT <C-w>gT

" make sessions and restore them
" you can also start vim with a session 'vim -S ~/mysession.vim'
let g:sessions_dir = '~/.vim/sessions'
exec 'nnoremap <Leader>ms :mksession! ' . g:sessions_dir . '/<C-D>'
exec 'nnoremap <Leader>mr :source ' . g:sessions_dir. '/<C-D>'

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   Plugins {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""" psf/black
" black virtualenv outside the dotfiles
let g:black_virtualenv = '~/.myvim/black'

"""""" tpope/vim-commentary
" yank and comment the current line with commentary
nnoremap gcy :normal yygcc<CR>
nnoremap gcp :normal yygccp<CR>
nnoremap gcP :normal yygccP<CR>

"""""" luochen1990/rainbow
let g:rainbow_active = 1 " toggle with :RainbowToggle

"""""" Valloric/YouCompleteMe
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
" autocomplete with keywords for the language
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_min_num_of_chars_for_completion = 1
" apply YCM FixIt
map <F9> :YcmCompleter FixIt<CR>
" stop popup window from automatically appearing
let g:ycm_auto_hover=''

"""""" chiel92/vim-autoformat
" run Autoformat, override this in after/ftplugin for type specific formatter
nnoremap <leader>bb :Autoformat<CR>


"""""" SirVer/ultisnips'
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsJumpForwardTrigger  = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-p>"
" open snippet file in separate window
let g:UltiSnipsEditSplit = "horizontal"
" edit snippets
nmap <leader>ue :UltiSnipsEdit<cr>

"""""" vim-syntastic/syntastic'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { 'passive_filetypes': ['tex'] }
set statusline+=\           " space
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

""" python setup
let g:syntastic_python_checkers = ['mypy', 'flake8']
" let g:syntastic_python_checkers = ['mypy', 'flake8', 'flake8-annotations', 'flake8-bandit', 'flake8-black', 'flake8-bugbear', 'flake8-import-order', 'flake8-polyfill']

" TODO toggle this https://developer.ibm.com/articles/l-vim-script-1/
" flake8 args
" line length errors [E501]
" too many # at start of comment [E266]
" whitespace before ':' [E203]
" line break before binary operator [W503]
" local variable 'var_name' is assigned to but never used [F841]
" this maybe is better done in .flake8 file
let g:syntastic_python_flake8_args = "--ignore=E501,E266,E203,W503"
" this maybe is better done in mypy.ini file
" let g:syntastic_python_mypy_args = "--ignore-missing-imports"
nnoremap <Leader>bs :SyntasticCheck<CR>

"""""" junegunn/fzf
set runtimepath+=~/.fzf
nnoremap <leader>fs :FZF ~/snippet/<CR>
nnoremap <leader>fd :FZF ~/dotfiles/<CR>
nnoremap <leader>fe :FZF ~/ephem/<CR>
nnoremap <leader>fr :FZF ~/repos/<CR>
nnoremap <Leader>fa :Ag<CR>
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>fb :Buffers<CR>
nnoremap <Leader>fl :Lines<CR>

"""""" python-syntax
let g:pythoh_highlight_all = 1

"""""" coverage
" let g:coverage_script = 'python3 -m coverage'
" set statusline+=\           " space
" set statusline+=%{coverage_highlight#get_current()}

"""""" vim-go
let g:go_auto_sameids = 1
let g:go_auto_type_info = 1
let g:go_fmt_command = "goimports"
let g:go_fmt_experimental = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_functions = 1
let g:go_highlight_operators = 1
let g:go_highlight_types = 1
let g:go_metalinter_autosave = 1
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FileType autocmd {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Fold using { { { } } }
autocmd FileType vim setlocal foldmethod=marker

" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Stop files with {% %} syntax to be set as htmldjango
au BufRead,BufNewFile,BufReadPost,BufEnter,BufWrite *.html set filetype=html

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fancy Functions {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" the function is in autoload/strip_trailing_whitespace.vim
nnoremap <F5> :call strip_trailing_whitespace#StripTrailingWhitespace()<CR>

" http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
" Restore cursor to file position in previous editing session
function! ResCur()
    if line("'\"") <= line("$")
        silent! normal! g`"
        return 1
    endif
endfunction
augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END

" https://github.com/vim/vim/issues/2490#issuecomment-393973253
" scroll inside terminal
function! ExitNormalMode()
    unmap <buffer> <silent> <RightMouse>
    vertical resize -5
    call feedkeys("a")
endfunction

function! EnterNormalMode()
    if &buftype == 'terminal' && mode('') == 't'
        call feedkeys("\<c-w>N")
        call feedkeys("\<c-y>")
        map <buffer> <silent> <RightMouse> :call ExitNormalMode()<CR>
    endif
    vertical resize +5
endfunction

tmap <silent> <ScrollWheelUp> <c-w>:call EnterNormalMode()<CR>

" Add keywords to all highlight groups
" https://vi.stackexchange.com/a/19043
function! UpdateTodoKeywords(...)
    let newKeywords = join(a:000, " ")
    let synTodo = map(filter(split(execute("syntax list"), '\n') , { i,v -> match(v, '^\w*Todo\>') == 0}), {i,v -> substitute(v, ' .*$', '', '')})
    for synGrp in synTodo
        execute "syntax keyword " . synGrp . " contained " . newKeywords
    endfor
endfunction

" Add custom highlighted keywords
augroup now
    autocmd!
    autocmd Syntax * call UpdateTodoKeywords("NOTE", "MAYBE", "YES", "NO", "QUESTION")
augroup END

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Load local settings {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if filereadable(expand('~/.vimrc.local'))
    source ~/.vimrc.local
endif

" }}}
