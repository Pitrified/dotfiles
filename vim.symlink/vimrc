filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
" Plugin 'tpope/vim-dispatch'
" Plugin 'tpope/fugitive'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-unimpaired'

Plugin 'scrooloose/nerdtree'
" Plugin 'scrooloose/nerdcommenter'

Plugin 'luochen1990/rainbow'
Plugin 'easymotion/vim-easymotion'
Plugin 'frioux/vim-regedit'

" autocomplete/linter/templates
Plugin 'rdnetto/YCM-Generator'
Plugin 'Valloric/YouCompleteMe'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'noahfrederick/vim-skeleton'
Plugin 'chiel92/vim-autoformat'
Plugin 'vim-syntastic/syntastic'

" colorscheme
Plugin 'lithammer/vim-eighties'
Plugin 'ldelossa/vimdark'
Plugin 'altercation/vim-colors-solarized'
Plugin 'morhetz/gruvbox'
Plugin 'aonemd/kuroi.vim'

" python
Plugin 'python/black'

" LaTeX
Plugin 'vim-latex/vim-latex'

" HTML/XML
Plugin 'mattn/emmet-vim'

" suan/vim-instant-markdown

call vundle#end()            " required

" basic miscellaneous
filetype plugin indent on
syntax enable
set encoding=utf-8

set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set virtualedit=onemore             " Allow for cursor beyond last character
set history=1000                    " Store a ton of history (default is 20)
" set spell                           " Spell checking on
set hidden                          " Allow buffer switching without saving

set gdefault                    " Substitute all words on a line, :s///g gets only the first
set showmatch                   " Show matching brackets/parenthesis
set matchtime=3                 " for 3 ms
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set wildignore=*.pyc,*.class

set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set splitright                  " Puts new vsplit windows to the right of the current
set splitbelow                  " Puts new split windows to the bottom of the current

set scrolloff=8
set listchars=tab:>-,trail:~,extends:>,precedes:<,space:·,eol:¬
set number
set relativenumber
set numberwidth=3
set cursorline				" highlight current line
" set cursorcolumn
set showmode

set backspace=indent,eol,start
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent

set mouse=a

" proper highlight for .tex
let g:tex_flavor = "latex"

" optics
set linespace=0
set background=dark 

if has('gui_running')  " in gvim do this
    set termguicolors
else
    set t_Co=256
endif

" colorscheme kuroi
" colorscheme antares   
" colorscheme gruvbox   
colorscheme gruvbox-bootleg

" let g:solarized_termcolors=256  " needed for terminal use     
" colorscheme solarized 

" GVIM
" set guifont=Menlo:h10   
" set guifont=Hack\ 10   
" set guioptions-=m  "menu bar
" set guioptions-=T  "toolbar
" set guioptions-=r  "scrollbar

" Setting up the directories 
set directory=~/.myvim/swap
set backup                      " Backups are nice ...
set backupdir=~/.myvim/backup
if has('persistent_undo')
    set undofile                " So is persistent undo ...
    set undolevels=1000         " Maximum number of changes that can be undone
    set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
    set undodir=~/.myvim/undo
endif


if has('clipboard')
    if has('unnamedplus')  " When possible use + register for copy-paste
        set clipboard=unnamed,unnamedplus
    else         " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif
endif

" status line TODO
if has('cmdline_info')
    set ruler                   " Show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
    set showcmd                 " Show partial commands in status line and
                                " Selected characters/lines in visual mode
endif

" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
" Restore cursor to file position in previous editing session
function! ResCur()
    if line("'\"") <= line("$")
        silent! normal! g`"
        return 1
    endif
endfunction
augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END

nnoremap <F5> :call StripTrailingWhitespace()<CR>
function! StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    %s/\s\+$//e
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" mappings and shortcuts
inoremap jk <ESC>
inoremap kj <ESC>

" move properly when lines are wrapped
nnoremap j gj
nnoremap k gk
" relative jump precise with count if there are wrapped lines
nnoremap gj j
nnoremap gk k

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" when in visual mode, search for selected text
vnoremap * ""y/<C-r>"<CR>
vnoremap # ""y?<C-r>"<CR>

" when in visual mode, J is usually a typo from holding shift for line visual
vnoremap J j
vnoremap K k

let mapleader = "\<Space>"

" leadermap

" toggle things
" clear highlight
nnoremap <silent> <leader>nh :set hlsearch!<CR>
nnoremap <silent> <leader>nc :set cursorcolumn!<CR>
nnoremap <silent> <leader>nw :set wrap!<CR>
nnoremap <silent> <leader>nl :set list!<CR>
nnoremap <leader>np :set paste!<CR>
nnoremap <leader>nr :RainbowToggle<CR>
nnoremap <leader>ns :setlocal spell! spelllang=en_us<CR>

" quick save and quit
nnoremap <leader>w :update<CR>
nnoremap <leader>q :q<CR>
" edit and source .vimrc
nnoremap <leader>re :tabedit $MYVIMRC<CR>
nnoremap <leader>rs :source $MYVIMRC<CR>
" yank whole file
nnoremap <leader>ya myggyG`y

" split screen
nnoremap <leader>d <C-w>v
nnoremap <leader>s <C-w>s
" navigate windows
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l
" move windows around
nnoremap <leader>mh <C-w><S-h>
nnoremap <leader>mj <C-w><S-j>
nnoremap <leader>mk <C-w><S-k>
nnoremap <leader>ml <C-w><S-l>
" terminal navigation
tnoremap <leader><leader>h <C-w>h
tnoremap <leader><leader>j <C-w>j
tnoremap <leader><leader>k <C-w>k
tnoremap <leader><leader>l <C-w>l
" move terminal around
tnoremap <leader><leader>mh <C-w><S-h>
tnoremap <leader><leader>mj <C-w><S-j>
tnoremap <leader><leader>mk <C-w><S-k>
tnoremap <leader><leader>ml <C-w><S-l>

" this should be only for c/c++
" nnoremap <leader>mm :update<CR>:Make<CR>
" nnoremap <leader>mr :!./%:r.out<CR>
" nnoremap <leader>mr :Do ./%:r.out<CR>

" make sessions and restore them
" you can also start vim with a session 'vim -S ~/mysession.vim'
let g:sessions_dir = '~/.vim/sessions'
exec 'nnoremap <Leader>ms :mksession! ' . g:sessions_dir . '/<C-D>'
exec 'nnoremap <Leader>mr :source ' . g:sessions_dir. '/<C-D>'


" Plugins

" yank and comment the current line with commentary
nnoremap gcy :normal yygcc<CR>

map <C-n> :NERDTreeToggle<CR>
let g:NERDSpaceDelims = 1

let g:rainbow_active = 1 " toggle with :RainbowToggle

let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1 " autocomplete with keywords for the language
let g:ycm_min_num_of_chars_for_completion = 1
" Apply YCM FixIt
map <F9> :YcmCompleter FixIt<CR>
" let g:ycm_autoclose_preview_window_after_completion=1

" let g:do_refresh_key

" nnoremap <leader>bb :Black<CR>
nnoremap <leader>bb :Autoformat<CR>

" UltiSnips
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsJumpForwardTrigger  = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-p>"
" open snippet file in separate window
let g:UltiSnipsEditSplit = "horizontal"
" edit snippets
nmap <leader>ue :UltiSnipsEdit<cr>


" syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" ignore line length errors [E501]
" ignore too many # at start of comment [E266]
" ignore whitespace before ':' [E203]
" ignore line break before binary operator [W503]
let g:syntastic_python_flake8_args = "--ignore=E501,E266,E203,W503"

" emmet
" use <c-y>, for now, put this in ftplugin if you really need it
" let g:user_emmet_leader_key=','

set runtimepath+=~/.fzf

if filereadable(expand('~/.vimrc.local'))
    source ~/.vimrc.local
endif
